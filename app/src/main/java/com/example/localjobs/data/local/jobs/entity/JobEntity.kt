package com.example.localjobs.data.local.jobs.entity

import androidx.room.Entity
import androidx.room.Ignore
import androidx.room.PrimaryKey
import com.example.localjobs.domain.jobs.model.JobData

@Entity(tableName = "jobs")
data class JobEntity (
    @PrimaryKey(autoGenerate = false)
    var id: Int = 0,
    var title: String? = null,
    var type: Int? = null,
    var primaryDetails: PrimaryDetailsEntity? = null,
    @Ignore var feeDetails: FeeDetailsEntity? = null,
    @Ignore var jobTags: List<JobTagsEntity> = listOf(),
    var jobType: Int? = null,
    var jobCategoryId: Int? = null,
    var qualification: Int? = null,
    var experience: Int? = null,
    var shiftTiming: Int? = null,
    var jobRoleId: Int? = null,
    var salaryMax: Int? = null,
    var salaryMin: Int? = null,
    var cityLocation: Int? = null,
    var locality: Int? = null,
    var premiumTill: String? = null,
    var content: String? = null,
    var companyName: String? = null,
    var advertiser: Int? = null,
    var buttonText: String? = null,
    var customLink: String? = null,
    var amount: String? = null,
    var views: Int? = null,
    var shares: Int? = null,
    var fbShares: Int? = null,
    var isBookmarked: Boolean? = null,
    @Ignore var isApplied: Boolean? = null,
    @Ignore var isOwner: Boolean? = null,
    @Ignore var updatedOn: String? = null,
    var whatsappNo: String? = null,
    @Ignore var contactPreference: ContactPreferenceEntity? = null,
    @Ignore var createdOn: String? = null,
    @Ignore var isPremium: Boolean? = null,
    @Ignore var creatives: List<CreativesEntity> = listOf(),
    @Ignore var videos: List<String> = listOf(),
    @Ignore var locations: List<LocationsEntity> = listOf(),
    @Ignore var tags: List<String> = listOf(),
    @Ignore var contentV3: ContentV3Entity? = null,
    @Ignore var status: Int? = null,
    var expireOn: String? = null,
    var jobHours: String? = null,
    var openingsCount: Int? = null,
    var jobRole: String? = null,
    var otherDetails: String? = null,
    var jobCategory: String? = null,
    var numApplications: Int? = null,
    var enableLeadCollection: Boolean? = null,
    @Ignore var isJobSeekerProfileMandatory: Boolean? = null,
    var jobLocationSlug: String? = null,
    var feesText: String? = null,
    var questionBankId: String? = null,
    var screeningRetry: String? = null,
    var shouldShowLastContacted: Boolean? = null,
    var feesCharged: Int? = null
) {
    fun toJobData(): JobData {
        return JobData (
            id = id,
            title = title,
            type = type,
            primaryDetails = primaryDetails,
//            feeDetails = feeDetails,
//            jobTags = jobTags,
            jobType = jobType,
            jobCategoryId = jobCategoryId,
            qualification = qualification,
            experience = experience,
            shiftTiming = shiftTiming,
            jobRoleId = jobRoleId,
            salaryMax = salaryMax,
            salaryMin = salaryMin,
            cityLocation = cityLocation,
            locality = locality,
            premiumTill = premiumTill,
            content = content,
            companyName = companyName,
            advertiser = advertiser,
            buttonText = buttonText,
            customLink = customLink,
            amount = amount,
            views = views,
            shares = shares,
            fbShares = fbShares,
            isBookmarked = isBookmarked,
            isApplied = isApplied,
            isOwner = isOwner,
            updatedOn = updatedOn,
            whatsappNo = whatsappNo,
//            contactPreference = contactPreference,
            createdOn = createdOn,
            isPremium = isPremium,
//            creatives = creatives,
//            videos = videos,
//            locations = locations,
//            tags = tags,
//            contentV3 = contentV3,
            status = status,
            expireOn = expireOn,
            jobHours = jobHours,
            openingsCount = openingsCount,
            jobRole = jobRole,
            otherDetails = otherDetails,
            jobCategory = jobCategory,
            numApplications = numApplications,
            enableLeadCollection = enableLeadCollection,
            isJobSeekerProfileMandatory = isJobSeekerProfileMandatory,
            jobLocationSlug = jobLocationSlug,
            feesText = feesText,
            questionBankId = questionBankId,
            screeningRetry = screeningRetry,
            shouldShowLastContacted = shouldShowLastContacted,
            feesCharged = feesCharged
        )
    }

    fun setIsBookmarked(isBookmarked: Boolean?) {
        this.isBookmarked = isBookmarked
    }
}
