package com.example.localjobs.data.remote.jobs.dto.model

import com.example.localjobs.data.local.jobs.entity.JobEntity
import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName

@Serializable
data class Job (
    @SerialName("id"                              ) var id                          : Int                  = 0,
    @SerialName("title"                           ) var title                       : String?              = null,
    @SerialName("type"                            ) var type                        : Int?                 = null,
    @SerialName("primary_details"                 ) var primaryDetails              : PrimaryDetails?      = null,
    @SerialName("fee_details"                     ) var feeDetails                  : FeeDetails?          = null,
    @SerialName("job_tags"                        ) var jobTags                     : ArrayList<JobTags>   = arrayListOf(),
    @SerialName("job_type"                        ) var jobType                     : Int?                 = null,
    @SerialName("job_category_id"                 ) var jobCategoryId               : Int?                 = null,
    @SerialName("qualification"                   ) var qualification               : Int?                 = null,
    @SerialName("experience"                      ) var experience                  : Int?                 = null,
    @SerialName("shift_timing"                    ) var shiftTiming                 : Int?                 = null,
    @SerialName("job_role_id"                     ) var jobRoleId                   : Int?                 = null,
    @SerialName("salary_max"                      ) var salaryMax                   : Int?                 = null,
    @SerialName("salary_min"                      ) var salaryMin                   : Int?                 = null,
    @SerialName("city_location"                   ) var cityLocation                : Int?                 = null,
    @SerialName("locality"                        ) var locality                    : Int?                 = null,
    @SerialName("premium_till"                    ) var premiumTill                 : String?              = null,
    @SerialName("content"                         ) var content                     : String?              = null,
    @SerialName("company_name"                    ) var companyName                 : String?              = null,
    @SerialName("advertiser"                      ) var advertiser                  : Int?                 = null,
    @SerialName("button_text"                     ) var buttonText                  : String?              = null,
    @SerialName("custom_link"                     ) var customLink                  : String?              = null,
    @SerialName("amount"                          ) var amount                      : String?              = null,
    @SerialName("views"                           ) var views                       : Int?                 = null,
    @SerialName("shares"                          ) var shares                      : Int?                 = null,
    @SerialName("fb_shares"                       ) var fbShares                    : Int?                 = null,
    @SerialName("is_bookmarked"                   ) var isBookmarked                : Boolean?             = null,
    @SerialName("is_applied"                      ) var isApplied                   : Boolean?             = null,
    @SerialName("is_owner"                        ) var isOwner                     : Boolean?             = null,
    @SerialName("updated_on"                      ) var updatedOn                   : String?              = null,
    @SerialName("whatsapp_no"                     ) var whatsappNo                  : String?              = null,
    @SerialName("contact_preference"              ) var contactPreference           : ContactPreference?   = null,
    @SerialName("created_on"                      ) var createdOn                   : String?              = null,
    @SerialName("is_premium"                      ) var isPremium                   : Boolean?             = null,
    @SerialName("creatives"                       ) var creatives                   : ArrayList<Creatives> = arrayListOf(),
    @SerialName("videos"                          ) var videos                      : ArrayList<String>    = arrayListOf(),
    @SerialName("locations"                       ) var locations                   : ArrayList<Locations> = arrayListOf(),
    @SerialName("tags"                            ) var tags                        : ArrayList<String>    = arrayListOf(),
    @SerialName("contentV3"                       ) var contentV3                   : ContentV3?           = null,
    @SerialName("status"                          ) var status                      : Int?                 = null,
    @SerialName("expire_on"                       ) var expireOn                    : String?              = null,
    @SerialName("job_hours"                       ) var jobHours                    : String?              = null,
    @SerialName("openings_count"                  ) var openingsCount               : Int?                 = null,
    @SerialName("job_role"                        ) var jobRole                     : String?              = null,
    @SerialName("other_details"                   ) var otherDetails                : String?              = null,
    @SerialName("job_category"                    ) var jobCategory                 : String?              = null,
    @SerialName("num_applications"                ) var numApplications             : Int?                 = null,
    @SerialName("enable_lead_collection"          ) var enableLeadCollection        : Boolean?             = null,
    @SerialName("is_job_seeker_profile_mandatory" ) var isJobSeekerProfileMandatory : Boolean?             = null,
    @SerialName("translated_content"              ) var translatedContent           : TranslatedContent?   = null,
    @SerialName("job_location_slug"               ) var jobLocationSlug             : String?              = null,
    @SerialName("fees_text"                       ) var feesText                    : String?              = null,
    @SerialName("question_bank_id"                ) var questionBankId              : String?              = null,
    @SerialName("screening_retry"                 ) var screeningRetry              : String?              = null,
    @SerialName("should_show_last_contacted"      ) var shouldShowLastContacted     : Boolean?             = null,
    @SerialName("fees_charged"                    ) var feesCharged                 : Int?                 = null
) {
    fun toJobEntity(): JobEntity {
        return JobEntity(
            id = id,
            title = title,
            type = type,
            primaryDetails = primaryDetails?.toPrimaryDetailsEntity(),
            feeDetails = feeDetails?.toFeeDetailsEntity(),
            jobTags = jobTags.map { it.toJobTagsEntity() },
            jobType = jobType,
            jobCategoryId = jobCategoryId,
            qualification = qualification,
            experience = experience,
            shiftTiming = shiftTiming,
            jobRoleId = jobRoleId,
            salaryMax = salaryMax,
            salaryMin = salaryMin,
            cityLocation = cityLocation,
            locality = locality,
            premiumTill = premiumTill,
            content = content,
            companyName = companyName,
            advertiser = advertiser,
            buttonText = buttonText,
            customLink = customLink,
            amount = amount,
            views = views,
            shares = shares,
            fbShares = fbShares,
            isBookmarked = isBookmarked,
            isApplied = isApplied,
            isOwner = isOwner,
            updatedOn = updatedOn,
            whatsappNo = whatsappNo,
            contactPreference = contactPreference?.toContactPreferenceEntity(),
            createdOn = createdOn,
            isPremium = isPremium,
            creatives = creatives.map { it.toCreativesEntity() },
            videos = videos,
            locations = locations.map { it.toLocationsEntity() },
            tags = tags,
            contentV3 = contentV3?.toContentV3Entity(),
            status = status,
            expireOn = expireOn,
            jobHours = jobHours,
            openingsCount = openingsCount,
            jobRole = jobRole,
            otherDetails = otherDetails,
            jobCategory = jobCategory,
            numApplications = numApplications,
            enableLeadCollection = enableLeadCollection,
            isJobSeekerProfileMandatory = isJobSeekerProfileMandatory,
            jobLocationSlug = jobLocationSlug,
            feesText = feesText,
            questionBankId = questionBankId,
            screeningRetry = screeningRetry,
            shouldShowLastContacted = shouldShowLastContacted,
            feesCharged = feesCharged
        )
    }
}